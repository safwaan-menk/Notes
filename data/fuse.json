{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Welcome to Dendron\n\nThis is the root of your dendron vault. If you decide to publish your entire vault, this will be your landing page. You are free to customize any part of this page except the frontmatter on top.\n\n## Lookup\n\nThis section contains useful links to related resources.\n\n- [Getting Started Guide](https://link.dendron.so/6b25)\n- [Discord](https://link.dendron.so/6b23)\n- [Home Page](https://wiki.dendron.so/)\n- [Github](https://link.dendron.so/6b24)\n- [Developer Docs](https://docs.dendron.so/)\n","n":0.132}}},{"i":2,"$":{"0":{"v":"Coding","n":1}}},{"i":3,"$":{"0":{"v":"Interviews","n":1}}},{"i":4,"$":{"0":{"v":"Leetcode","n":1}}},{"i":5,"$":{"0":{"v":"Solutions","n":1},"1":{"v":"\n|Problem|Solution|\n|:--:|:--:|\n|[Transpose Matrix](https://leetcode.com/problems/transpose-matrix/)|[Solution](https://leetcode.com/problems/transpose-matrix/discuss/2103382/Clean-C%2B%2B-Solution-Easiest-to-understand-for-beginners)|\n\n","n":0.707}}},{"i":6,"$":{"0":{"v":"Courses","n":1}}},{"i":7,"$":{"0":{"v":"Databases","n":1}}},{"i":8,"$":{"0":{"v":"DatabaseDesignCourse","n":1}}},{"i":9,"$":{"0":{"v":"syllabus","n":1},"1":{"v":"\n### Course Link: https://www.youtube.com/watch?v=ztHopE5Wnpc\n⭐️ Contents ⭐ \n- [x] ⌨️ ([0:00:00](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=0s))   Introduction\n- [x] ⌨️ ([0:03:12](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=192s))  What is a Database?\n- [x] ⌨️ ([0:11:04](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=664s)) What-Is-A-Relational-Database\n![[coding.courses.databases.DatabaseDesignCourse.What-Is-A-Relational-Database]]\n- [x] ⌨️ ([0:23:42](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=1422s)) RDBMS ![[coding.courses.databases.DatabaseDesignCourse.RDBMS]]\n- [x] ⌨️ ([0:37:32](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=2252s))  Introduction to SQL\n- [x] ⌨️ ([0:44:01](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=2641s))  Naming Conventions\n- [x] ⌨️ ([0:47:16](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=2836s))  What-Is-Database-Design ![[coding.courses.databases.DatabaseDesignCourse.What-Is-Database-Design]]\n- [x] ⌨️ ([1:00:26](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=3626s)) Data-Integrity ![[coding.courses.databases.DatabaseDesignCourse.Data-Integrity]]\n- [x] ⌨️ ([1:13:28](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=4408s))  Database Terms\n- [x] ⌨️ ([1:28:28](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=5308s))  More Database Terms\n- [x] ⌨️ ([1:38:46](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=5926s))  Atomic Values\n- [x] ⌨️ ([1:44:25](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=6265s))  Relationships\n- [x] ⌨️([1:50:35](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=6635s))  One-to-One Relationships\n- [x] ⌨️ ([1:53:45](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=6825s))  One-to-Many Relationships\n- [x] ⌨️ ([1:57:50](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=7070s))  Many-to-Many Relationships\n- [x] ⌨️ ([2:02:24](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=7344s))  Designing One-to-One Relationships: **stored as attribute or as a reference to another table associated only with that entit y**\n- [x] ⌨️ ([2:13:40](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=8020s))  Designing One-to-Many Relationships \n- [x] ⌨️ ([2:23:50](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=8630s))  Parent Tables and Child Tables \n- [x] ⌨️ ([2:30:42](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=9042s)) Designing-Many-ToMany![[coding.courses.databases.DatabaseDesignCourse.Design-Many-to-Many]]\n- [x] ⌨️ ([2:46:23](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=9983s)) Summary of Relationships \n- [ ] ⌨️ ([2:54:42](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=10482s)) Introduction to Keys ![[coding.courses.databases.DatabaseDesignCourse.Introduction-to-Keys]]\n- [ ] ⌨️ ([3:07:24](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=11244s)) Primary Key Index \n- [ ] ⌨️ ([3:13:42](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=11622s)) Look up Table \n- [ ] ⌨️ ([3:30:19](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=12619s)) Superkey and Candidate Key \n- [ ] ⌨️ ([3:48:59](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=13739s)) Primary Key and Alternate Key \n- [ ] ⌨️ ([3:56:34](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=14194s)) Surrogate Key and Natural Key \n- [ ] ⌨️ ([4:03:43](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=14623s)) Should I use Surrogate Keys or Natural Keys?\n- [ ] ⌨️ ([4:13:07](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=15187s)) Foreign Key \n- [ ] ⌨️ ([4:25:15](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=15915s)) NOT NULL Foreign Key \n- [ ] ⌨️ ([4:38:17](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=16697s)) Foreign Key Constraints \n- [ ] ⌨️ ([4:49:50](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=17390s)) Simple Key, Composite Key, Compound Key \n- [ ] ⌨️ ([5:01:54](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=18114s)) Review and Key Points....HA GET IT? KEY points! \n- [ ] ⌨️ ([5:10:28](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=18628s)) Introduction to Entity Relationship Modeling \n- [ ] ⌨️ ([5:17:34](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=19054s)) Cardinality \n- [ ] ⌨️ ([5:24:41](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=19481s)) Modality \n- [ ] ⌨️ ([5:35:14](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=20114s)) Introduction to Database Normalization \n- [ ] ⌨️ ([5:39:48](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=20388s)) 1NF (First Normal Form of Database Normalization) \n- [ ] ⌨️ ([5:46:34](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=20794s)) 2NF (Second Normal Form of Database Normalization) \n- [ ] ⌨️ ([5:55:00](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=21300s)) 3NF (Third Normal Form of Database Normalization) \n- [ ] ⌨️ ([6:01:12](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=21672s)) Indexes (Clustered, Nonclustered, Composite Index) \n- [ ] ⌨️ ([6:14:36](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=22476s)) Data Types \n- [ ] ⌨️ ([6:25:55](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=23155s)) Introduction to Joins \n- [ ] ⌨️ ([6:39:23](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=23963s)) Inner Join\n- [ ] ⌨️ ([6:54:48](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=24888s)) Inner Join on 3 Tables \n- [ ] ⌨️ ([7:07:41](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=25661s)) Inner Join on 3 Tables (Example) \n- [ ] ⌨️ ([7:23:53](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=26633s)) Introduction to Outer Joins\n- [ ] ⌨️ ([7:29:46](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=26986s)) Right Outer Join \n- [ ] ⌨️ ([7:35:33](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=27333s)) JOIN with NOT NULL Columns \n- [ ] ⌨️ ([7:42:40](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=27760s)) Outer Join Across 3 Tables \n- [ ] ⌨️ ([7:48:24](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=28104s)) Alias \n- [ ] ⌨️ ([7:52:13](https://www.youtube.com/watch?v=ztHopE5Wnpc&t=28333s)) Self Join\n","n":0.049}}},{"i":10,"$":{"0":{"v":"What-Is-Database-Design","n":1},"1":{"v":"\n- [[coding.courses.databases.DatabaseDesignCourse.Data-Integrity]]:\n  - Repeating Data\n  - Updated Data\n- Levels of Database Design\n  - Conceptual\n    - draw it out, decide tables and dependencies\n  - Logical\n    - structure tables, design schema\n  - Physicals \n    - Decide tools and implementation","n":0.164}}},{"i":11,"$":{"0":{"v":"What-Is-A-Relational-Database","n":1},"1":{"v":"- terms\n\t- **entity**: anything we store data about (we store data about a user)\n\t- **attribute**: (user's email, phone number,  age, etc.)\n  \n","n":0.213}}},{"i":12,"$":{"0":{"v":"RDBMS","n":1},"1":{"v":"- **R**DBMS -> **Relational**Database Management System\n\t- can run queries on db tables\n\t- view mechanim: change surface appearance of data\n\t- transactions\n\t- Tools examples:\n\t\t- SQL Server\n\t\t- MySQL\n\t\t- PostgreSQL\n","n":0.196}}},{"i":13,"$":{"0":{"v":"Introduction-to-Keys","n":1},"1":{"v":"\n- [ ] unique\n- [ ] never null\n- [ ] never changing\n","n":0.289}}},{"i":14,"$":{"0":{"v":"Design-Many-to-Many","n":1},"1":{"v":"<br>\n\n**create intermediary table with ids of both tables** \n\n<br>\n\nclass table\n\n|id|class_name|\n|:--:|:--:|\n|5|Math|\n|9|Art|\n|2|Science|\n\n<BR>\nintermediary table\n\n|id|class_id|student_id|\n|:--:|:--:|\n|5|5|5|\n|2|9|5|\n|3|5|4|\n|4|2|4|\n|1|9|7|\n\n<br>\n\n\nstudent table\n\n|id|student_name|\n|:--:|:--:|\n|5|John|\n|4|Joe|\n|7|Paul|\n\n\n","n":0.289}}},{"i":15,"$":{"0":{"v":"Data-Integrity","n":1},"1":{"v":"\n- Anomalies: Error in data integrity. \n- Entity Integrity\n  - uniqueness (ID's)\n- Referential Integrity\n  - reference ID from one table in another table\n  - foreign key\n- Domain Integrity\n  - Each rows values should have validation (column: phone number value: cake should not be allowed because cake is not a 10 digit number)\n  - Data types\n  - Foreign Key \n- Normalization: Process of insuring Data Integrity ","n":0.124}}}]}
